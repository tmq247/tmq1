"""
MIT License

Copyright (c) 2023 TheHamkerCat

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
import re

from pyrogram import filters

from wbb import app
from wbb.core.decorators.errors import capture_err
from wbb.core.decorators.permissions import adminsOnly
from wbb.core.sections import section
from wbb.utils.dbfunctions import (
    alpha_to_int,
    get_karma,
    get_karmas,
    int_to_alpha,
    is_karma_on,
    karma_off,
    karma_on,
    update_karma,
)
from wbb.utils.filter_groups import karma_negative_group, karma_positive_group
from wbb.utils.functions import get_user_id_and_usernames

__MODULE__ = "Karma"
__HELP__ = """[UPVOTE] - S·ª≠ d·ª•ng c√°c t·ª´ kh√≥a ·ªßng h·ªô nh∆∞ "+", "+1", "c·∫£m ∆°n", v.v. ƒë·ªÉ ·ªßng h·ªô m·ªôt tin nh·∫Øn.
[DOWNVOTE] - S·ª≠ d·ª•ng c√°c t·ª´ kh√≥a ph·∫£n ƒë·ªëi nh∆∞ "-", "-1", v.v. ƒë·ªÉ ph·∫£n ƒë·ªëi m·ªôt tin nh·∫Øn.
/karma_toggle [ENABLE|DISABLE] - K√≠ch ho·∫°t ho·∫∑c v√¥ hi·ªáu h√≥a h·ªá th·ªëng Nghi·ªáp ch∆∞·ªõng trong cu·ªôc tr√≤ chuy·ªán c·ªßa b·∫°n.
Tr·∫£ l·ªùi tin nh·∫Øn b·∫±ng /karma ƒë·ªÉ ki·ªÉm tra nghi·ªáp l·ª±c c·ªßa ng∆∞·ªùi d√πng
G·ª≠i /karma m√† kh√¥ng tr·∫£ l·ªùi b·∫•t k·ª≥ tin nh·∫Øn n√†o ƒë·ªÉ ki·ªÉm tra danh s√°ch 10 ng∆∞·ªùi d√πng h√†ng ƒë·∫ßu"""

regex_upvote = r"^(\++|\+1|thx|tnx|tq|ty|thankyou|thank you|thanx|thanks|pro|cool|good|agree|üëç|\++ .+)$"
regex_downvote = r"^(-+|-1|not cool|disagree|worst|bad|üëé|-+ .+)$"


@app.on_message(
    filters.text
    & filters.group
    & filters.incoming
    & filters.reply
    & filters.regex(regex_upvote, re.IGNORECASE)
    & ~filters.via_bot
    & ~filters.bot,
    group=karma_positive_group,
)
@capture_err
async def upvote(_, message):
    if not await is_karma_on(message.chat.id):
        return
    if not message.reply_to_message.from_user:
        return
    if not message.from_user:
        return
    if message.reply_to_message.from_user.id == message.from_user.id:
        return
    chat_id = message.chat.id
    user_id = message.reply_to_message.from_user.id
    user_mention = message.reply_to_message.from_user.mention
    current_karma = await get_karma(chat_id, await int_to_alpha(user_id))
    if current_karma:
        current_karma = current_karma["karma"]
        karma = current_karma + 1
        new_karma = {"karma": karma}
        await update_karma(chat_id, await int_to_alpha(user_id), new_karma)
    else:
        karma = 1
        new_karma = {"karma": karma}
        await update_karma(chat_id, await int_to_alpha(user_id), new_karma)
    await message.reply_text(
        f"TƒÉng nghi·ªáp c·ªßa {user_mention} th√™m 1 \nT·ªïng s·ªë ƒëi·ªÉm: {karma}"
    )


@app.on_message(
    filters.text
    & filters.group
    & filters.incoming
    & filters.reply
    & filters.regex(regex_downvote, re.IGNORECASE)
    & ~filters.via_bot
    & ~filters.bot,
    group=karma_negative_group,
)
@capture_err
async def downvote(_, message):
    if not await is_karma_on(message.chat.id):
        return
    if not message.reply_to_message.from_user:
        return
    if not message.from_user:
        return
    if message.reply_to_message.from_user.id == message.from_user.id:
        return

    chat_id = message.chat.id
    user_id = message.from_user.id
    current_karma = await get_karma(chat_id, await int_to_alpha(user_id))
    if current_karma:
        current_karma = current_karma["karma"]
        karma = current_karma - 1
        new_karma = {"karma": karma}
        await update_karma(chat_id, await int_to_alpha(user_id), new_karma)
    else:
        karma = 1
        new_karma = {"karma": karma}
        await update_karma(chat_id, await int_to_alpha(user_id), new_karma)

    user_id = message.reply_to_message.from_user.id
    user_mention = message.reply_to_message.from_user.mention
    current_karma = await get_karma(chat_id, await int_to_alpha(user_id))
    if current_karma:
        current_karma = current_karma["karma"]
        karma = current_karma - 1
        new_karma = {"karma": karma}
        await update_karma(chat_id, await int_to_alpha(user_id), new_karma)
    else:
        karma = 1
        new_karma = {"karma": karma}
        await update_karma(chat_id, await int_to_alpha(user_id), new_karma)
    await message.reply_text(
        f"Gi·∫£m nghi·ªáp c·ªßa {user_mention} ƒëi 1 \nT·ªïng s·ªë ƒëi·ªÉm: {karma}"
    )


@app.on_message(filters.command("karma") & filters.group)
@capture_err
async def command_karma(_, message):
    chat_id = message.chat.id
    if not message.reply_to_message:
        m = await message.reply_text("Ph√¢n T√≠ch Nghi·ªáp ch∆∞·ªõng...")
        karma = await get_karmas(chat_id)
        if not karma:
            return await m.edit("Kh√¥ng c√≥ Nghi·ªáp ch∆∞·ªõng trong DB cho cu·ªôc tr√≤ chuy·ªán n√†y.")
        msg = f"Karma list of {message.chat.title}"
        limit = 0
        karma_dicc = {}
        for i in karma:
            user_id = await alpha_to_int(i)
            user_karma = karma[i]["karma"]
            karma_dicc[str(user_id)] = user_karma
            karma_arranged = dict(
                sorted(
                    karma_dicc.items(),
                    key=lambda item: item[1],
                    reverse=True,
                )
            )
        if not karma_dicc:
            return await m.edit("Kh√¥ng c√≥ nghi·ªáp ch∆∞·ªõng trong DB cho cu·ªôc tr√≤ chuy·ªán n√†y.")
        userdb = await get_user_id_and_usernames(app)
        karma = {}
        for user_idd, karma_count in karma_arranged.items():
            if limit > 15:
                break
            if int(user_idd) not in list(userdb.keys()):
                continue
            username = userdb[int(user_idd)]
            karma["@" + username] = ["**" + str(karma_count) + "**"]
            limit += 1
        await m.edit(section(msg, karma))
    else:
        if not message.reply_to_message.from_user:
            return await message.reply("Ng∆∞·ªùi d√πng m·ªõi kh√¥ng c√≥ nghi·ªáp ch∆∞·ªõng.")

        user_id = message.reply_to_message.from_user.id
        karma = await get_karma(chat_id, await int_to_alpha(user_id))
        if karma:
            karma = karma["karma"]
            await message.reply_text(f"**T·ªïng s·ªë ƒëi·ªÉm**: __{karma}__")
        else:
            karma = 0
            await message.reply_text(f"**T·ªïng s·ªë ƒëi·ªÉm**: __{karma}__")


@app.on_message(filters.command("karma_toggle") & ~filters.private)
@adminsOnly("can_change_info")
async def captcha_state(_, message):
    usage = "**C√°ch s·ª≠ d·ª•ng:**\n/karma_toggle [ENABLE|DISABLE]"
    if len(message.command) != 2:
        return await message.reply_text(usage)
    chat_id = message.chat.id
    state = message.text.split(None, 1)[1].strip()
    state = state.lower()
    if state == "enable":
        await karma_on(chat_id)
        await message.reply_text("ƒê√£ b·∫≠t H·ªá th·ªëng Nghi·ªáp ch∆∞·ªõng cho cu·ªôc tr√≤ chuy·ªán n√†y.")
    elif state == "disable":
        await karma_off(chat_id)
        await message.reply_text("ƒê√£ t·∫Øt H·ªá th·ªëng Nghi·ªáp ch∆∞·ªõng cho cu·ªôc tr√≤ chuy·ªán n√†y.")
    else:
        await message.reply_text(usage)
